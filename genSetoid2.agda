{-# OPTIONS --type-in-type #-}

module genSetoid2 where

open import Setoid
open import prop
open import Data.Empty
open import Data.Unit
open import Data.Product
open import Setoid.Fibra-SS
open import Setoid.Isomorphism

record Graph : Set₁ where
  field
    Vertex : Set
    Edge   : Vertex → Vertex → Set

  data Path : Vertex → Vertex → Set where
    empty : ∀ x → Path x x
    plus  : ∀ {x y z} → Edge x y → Path y z → Path x z
    minus : ∀ {x y z} → Edge y x → Path y z → Path x z

  record Fibra-GS : Set where
    field
      FibGS : Vertex → Setoid
      SubGS : ∀ {x y} → Edge x y → Iso (FibGS x) (FibGS y)

    SUBGS : ∀ {x y} → Path x y → Iso (FibGS x) (FibGS y)
    SUBGS (empty x) = id-iso (FibGS x)
    SUBGS (plus e p) = comp-iso (SUBGS p) (SubGS e)
    SUBGS (minus e p) = fill (SubGS e) (SUBGS p) (id-iso _)

    record Section : Set where
      field
        app : ∀ x → El (FibGS x)
        wd  : ∀ x x' x* → app x ~< SubGS x* > app x'

      postulate WD : ∀ x x' x* → app x ~< SUBGS x* > app x'
{-      WD x .x (empty .x) = r (FibGS x) (app x)
      WD x x' (plus x₁ x*) = {!!}
      WD x x' (minus x₁ x*) = {!!} -}
  open Fibra-GS public

open Graph public

Setoid2Graph : Setoid → Graph
Setoid2Graph S = record { 
  Vertex = El S ;
  Edge = E S }
--TODO Define setoid generated by a graph.  Prove these are inverses.

Sigma-GS : ∀ G → Fibra-GS G → Graph
Sigma-GS G A = record { 
  Vertex = Σ[ g ∈ Vertex G ] El (FibGS A g) ; 
  Edge = λ { (g , a) (g' , a') → Σ[ g* ∈ Path G g g' ] a ~< SUBGS A g* > a'} }

UnitG : Graph
UnitG = record { Vertex = ⊤ ; Edge = λ _ _ → ⊥ }

{- append : ∀ {X} {G : graphOver X} {x y z : X} → pathsIn G x y → pathsIn G y z → pathsIn G x z
append (empty x) q = q
append (plus e p) q = plus e (append p q)
append (minus e p) q = minus e (append p q)

append-reverse : ∀ {X} {G : graphOver X} {x y z : X}
                → pathsIn G y x → pathsIn G y z → pathsIn G z x
append-reverse p (empty _) = p
append-reverse p (plus e q) = append-reverse (minus e p) q
append-reverse p (minus e q) = append-reverse (plus e p) q 

conjugate : ∀ {X} {G : graphOver X} {x x' y y' : X}
            → pathsIn G x x' → pathsIn G y y' → pathsIn G x y → pathsIn G x' y'
conjugate {X} {G} x* y* p = append-reverse y* (append-reverse x* p)

reverse  : ∀ {X} {G : graphOver X} {x y : X} → pathsIn G x y → pathsIn G y x
reverse' : ∀ {X} {G : graphOver X} {x y : X} → pathsIn G x y → pathsIn G y x
reverse  {X} {G} {x} {y} p = append-reverse  (empty x) p
reverse' p = conjugate p (empty _) (empty _)

append  : ∀ {X} {G : graphOver X} {x y z : X} → pathsIn G x y → pathsIn G y z → pathsIn G x z
append' : ∀ {X} {G : graphOver X} {x y z : X} → pathsIn G x y → pathsIn G y z → pathsIn G x z
append  p q = append-reverse q (reverse p)
append' p q = conjugate (empty _) q p

generateS : ∀ {X : Set} → graphOver X → Setoid
generateS {X} G = record { El = X; E = pathsIn G; r = empty;
  E* = λ x* y* → (λ xy   → conjugate x* y* xy) ,
                 (λ x'y' → conjugate (reverse x*) (reverse y*) x'y') }

genFun : ∀ {X Y : Set} (f : X → Y) (G : graphOver X) (H : graphOver Y) → Set
genFun f G H = (e : Edg G) → pathsIn H (f (s G e)) (f (t G e))

{- genFuns : ∀ {X Y} (G : graphOver X) (H : graphOver Y) → graphOver (genFun {!!} {!!} {!!})
genFuns = {!!} -}

record genIso {X Y : Set} (fg : X ⇔ Y) (G : graphOver X) (H : graphOver Y) : Set where
  field
    I+ : genFun (proj₁ fg) G H
    I- : genFun (proj₂ fg) H G
    I= : ∀ (x : X) (y : Y) → pathsIn G x ((proj₂ fg) y) ⇔ pathsIn H ((proj₁ fg) x) y
open genIso

record genFibS {X : Set} (G : graphOver X) : Set where
  constructor fibra
  field
    Fam  : X → Set
    FamS : ∀ (x : X) → graphOver (Fam x)
    Fib  : ∀ (e : Edg G) → Fam (s G e) ⇔ Fam (t G e)
    FibI : ∀ (e : Edg G) → genIso (Fib e) (FamS (s G e)) (FamS (t G e))
open genFibS

Π-S-Base : ∀ {X : Set} (G : graphOver X) (F : genFibS G) → Set
Π-S-Base {X} G F = Σ[ f ∈ ((x : X) → Fam F x) ]
                    ((e : Edg G) →
                      pathsIn (FamS F (t G e)) (proj₁ (Fib F e) (f (s G e))) (f (t G e)))

{- Π-S-S : ∀ {X : Set} (G : graphOver X) (F : genFibS G) → graphOver (Π-S-Base G F)
Π-S-S G (fibra Fam FamS Fib FibI) =
  record {
   Edg = {!(e : Edg G X) → ?!};
   s = {!!};
   t = {!!} } -}

record Graph : Set₁ where
  field
    Vertex  : Set
    isGraph : graphOver Vertex
  open graphOver isGraph public

Fib-GS : Graph → Set
Fib-GS G = genFibS (Graph.isGraph G)

UnitG : Graph
UnitG = record { 
  Vertex = ⊤ ; 
  isGraph = record { 
    Edg = ⊤ ; 
    s = λ _ → tt ; 
    t = λ _ → tt } }

Sigma-GP : ∀ G → Fib-GS G → Graph
Sigma-GP G A = record { 
  Vertex = Σ[ g ∈ Graph.Vertex G ] genFibS.Fam A g ; 
  isGraph = record { 
    Edg = Σ[ e ∈ Graph.Edg G ] ({!!} ∋ {!!} ~[ {!!} ] {!!}) ; s = {!!} ; t = {!!} } }
-}
